// Generated by rstantools.  Do not edit by hand.

/*
    breathteststan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    breathteststan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with breathteststan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_linexp_gastro_1b_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 39> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 14, column 2 to column 31)",
  " (in 'string', line 15, column 2 to column 34)",
  " (in 'string', line 16, column 2 to column 34)",
  " (in 'string', line 17, column 2 to column 23)",
  " (in 'string', line 18, column 2 to column 26)",
  " (in 'string', line 19, column 2 to column 29)",
  " (in 'string', line 22, column 2 to column 12)",
  " (in 'string', line 23, column 2 to column 11)",
  " (in 'string', line 24, column 2 to column 14)",
  " (in 'string', line 25, column 2 to column 14)",
  " (in 'string', line 26, column 11 to column 12)",
  " (in 'string', line 26, column 2 to column 14)",
  " (in 'string', line 27, column 2 to column 29)",
  " (in 'string', line 28, column 2 to column 30)",
  " (in 'string', line 29, column 2 to column 32)",
  " (in 'string', line 30, column 2 to column 43)",
  " (in 'string', line 31, column 2 to column 25)",
  " (in 'string', line 32, column 2 to column 25)",
  " (in 'string', line 34, column 3 to column 20)",
  " (in 'string', line 35, column 3 to column 18)",
  " (in 'string', line 36, column 3 to column 24)",
  " (in 'string', line 37, column 3 to column 24)",
  " (in 'string', line 38, column 3 to column 67)",
  " (in 'string', line 33, column 14 to line 39, column 3)",
  " (in 'string', line 33, column 0 to line 39, column 3)",
  " (in 'string', line 40, column 2 to column 30)",
  " (in 'string', line 6, column 2 to column 16)",
  " (in 'string', line 7, column 2 to column 17)",
  " (in 'string', line 8, column 2 to column 24)",
  " (in 'string', line 9, column 13 to column 14)",
  " (in 'string', line 9, column 2 to column 16)",
  " (in 'string', line 10, column 9 to column 10)",
  " (in 'string', line 10, column 2 to column 19)",
  " (in 'string', line 11, column 9 to column 10)",
  " (in 'string', line 11, column 2 to column 19)",
  " (in 'string', line 14, column 18 to column 26)",
  " (in 'string', line 15, column 18 to column 26)",
  " (in 'string', line 16, column 18 to column 26)"};
#include <stan_meta_header.hpp>
class model_linexp_gastro_1b final : public model_base_crtp<model_linexp_gastro_1b> {
private:
  double prior_v0;
  int n;
  int n_record;
  std::vector<int> record;
  Eigen::Matrix<double,-1,1> minute_data__;
  Eigen::Matrix<double,-1,1> volume_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> minute{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> volume{nullptr, 0};
public:
  ~model_linexp_gastro_1b() {}
  model_linexp_gastro_1b(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_linexp_gastro_1b_namespace::model_linexp_gastro_1b";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 27;
      context__.validate_dims("data initialization", "prior_v0", "double",
        std::vector<size_t>{});
      prior_v0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 27;
      prior_v0 = context__.vals_r("prior_v0")[(1 - 1)];
      current_statement__ = 28;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 28;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "n_record", "int",
        std::vector<size_t>{});
      n_record = std::numeric_limits<int>::min();
      current_statement__ = 29;
      n_record = context__.vals_i("n_record")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "n_record", n_record, 0);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("record", "n", n);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "record", "int",
        std::vector<size_t>{static_cast<size_t>(n)});
      record = std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 31;
      record = context__.vals_i("record");
      current_statement__ = 32;
      stan::math::validate_non_negative_index("minute", "n", n);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "minute", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      minute_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                        std::numeric_limits<double>::quiet_NaN());
      new (&minute)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(minute_data__.data(), n);
      {
        std::vector<local_scalar_t__> minute_flat__;
        current_statement__ = 33;
        minute_flat__ = context__.vals_r("minute");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 33;
          stan::model::assign(minute, minute_flat__[(pos__ - 1)],
            "assigning variable minute", stan::model::index_uni(sym1__));
          current_statement__ = 33;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 34;
      stan::math::validate_non_negative_index("volume", "n", n);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "volume", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      volume_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                        std::numeric_limits<double>::quiet_NaN());
      new (&volume)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(volume_data__.data(), n);
      {
        std::vector<local_scalar_t__> volume_flat__;
        current_statement__ = 35;
        volume_flat__ = context__.vals_r("volume");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 35;
          stan::model::assign(volume, volume_flat__[(pos__ - 1)],
            "assigning variable volume", stan::model::index_uni(sym1__));
          current_statement__ = 35;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 36;
      stan::math::validate_non_negative_index("v0", "n_record", n_record);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("kappa", "n_record", n_record);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("tempt", "n_record", n_record);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_record + n_record + n_record + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_linexp_gastro_1b";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_linexp_gastro_1b_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> v0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_record, DUMMY_VAR__);
      current_statement__ = 1;
      v0 = in__.template read_constrain_lb<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
             n_record);
      Eigen::Matrix<local_scalar_t__,-1,1> kappa =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_record, DUMMY_VAR__);
      current_statement__ = 2;
      kappa = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                n_record);
      Eigen::Matrix<local_scalar_t__,-1,1> tempt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_record, DUMMY_VAR__);
      current_statement__ = 3;
      tempt = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                n_record);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ mu_kappa = DUMMY_VAR__;
      current_statement__ = 5;
      mu_kappa = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      local_scalar_t__ sigma_kappa = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_kappa = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      {
        int reci = std::numeric_limits<int>::min();
        local_scalar_t__ v0r = DUMMY_VAR__;
        local_scalar_t__ kappar = DUMMY_VAR__;
        local_scalar_t__ temptr = DUMMY_VAR__;
        current_statement__ = 11;
        stan::math::validate_non_negative_index("vol", "n", n);
        std::vector<local_scalar_t__> vol =
          std::vector<local_scalar_t__>(n, DUMMY_VAR__);
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_kappa, 1.5, 0.5));
        current_statement__ = 14;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_kappa, 1, 0.5));
        current_statement__ = 15;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(v0, prior_v0, 100));
        current_statement__ = 16;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(kappa, mu_kappa,
                         sigma_kappa));
        current_statement__ = 17;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(tempt, 60, 20));
        current_statement__ = 18;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(sigma, 20, 0.5));
        current_statement__ = 25;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 19;
          reci = stan::model::rvalue(record, "record",
                   stan::model::index_uni(i));
          current_statement__ = 20;
          v0r = stan::model::rvalue(v0, "v0", stan::model::index_uni(reci));
          current_statement__ = 21;
          kappar = stan::model::rvalue(kappa, "kappa",
                     stan::model::index_uni(reci));
          current_statement__ = 22;
          temptr = stan::model::rvalue(tempt, "tempt",
                     stan::model::index_uni(reci));
          current_statement__ = 23;
          stan::model::assign(vol, ((v0r * (1 + ((kappar *
            stan::model::rvalue(minute, "minute", stan::model::index_uni(i)))
            / temptr))) *
            stan::math::exp(
              (-stan::model::rvalue(minute, "minute",
                  stan::model::index_uni(i)) / temptr))),
            "assigning variable vol", stan::model::index_uni(i));
        }
        current_statement__ = 26;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(volume, vol, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_linexp_gastro_1b_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> v0 =
        Eigen::Matrix<double,-1,1>::Constant(n_record,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      v0 = in__.template read_constrain_lb<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
             n_record);
      Eigen::Matrix<double,-1,1> kappa =
        Eigen::Matrix<double,-1,1>::Constant(n_record,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      kappa = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                n_record);
      Eigen::Matrix<double,-1,1> tempt =
        Eigen::Matrix<double,-1,1>::Constant(n_record,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      tempt = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                n_record);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double mu_kappa = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      mu_kappa = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      double sigma_kappa = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sigma_kappa = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      out__.write(v0);
      out__.write(kappa);
      out__.write(tempt);
      out__.write(sigma);
      out__.write(mu_kappa);
      out__.write(sigma_kappa);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> v0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_record, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(v0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_record),
        "assigning variable v0");
      out__.write_free_lb(0, v0);
      Eigen::Matrix<local_scalar_t__,-1,1> kappa =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_record, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(kappa,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_record),
        "assigning variable kappa");
      out__.write_free_lb(0, kappa);
      Eigen::Matrix<local_scalar_t__,-1,1> tempt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_record, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(tempt,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_record),
        "assigning variable tempt");
      out__.write_free_lb(0, tempt);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ mu_kappa = DUMMY_VAR__;
      current_statement__ = 5;
      mu_kappa = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, mu_kappa);
      local_scalar_t__ sigma_kappa = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_kappa = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_kappa);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "v0", "double",
        std::vector<size_t>{static_cast<size_t>(n_record)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "kappa", "double",
        std::vector<size_t>{static_cast<size_t>(n_record)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "tempt", "double",
        std::vector<size_t>{static_cast<size_t>(n_record)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "mu_kappa",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigma_kappa",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> v0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_record, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> v0_flat__;
        current_statement__ = 1;
        v0_flat__ = context__.vals_r("v0");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(v0, v0_flat__[(pos__ - 1)],
            "assigning variable v0", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, v0);
      Eigen::Matrix<local_scalar_t__,-1,1> kappa =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_record, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> kappa_flat__;
        current_statement__ = 2;
        kappa_flat__ = context__.vals_r("kappa");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(kappa, kappa_flat__[(pos__ - 1)],
            "assigning variable kappa", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, kappa);
      Eigen::Matrix<local_scalar_t__,-1,1> tempt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_record, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> tempt_flat__;
        current_statement__ = 3;
        tempt_flat__ = context__.vals_r("tempt");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(tempt, tempt_flat__[(pos__ - 1)],
            "assigning variable tempt", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, tempt);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      local_scalar_t__ mu_kappa = DUMMY_VAR__;
      current_statement__ = 5;
      mu_kappa = context__.vals_r("mu_kappa")[(1 - 1)];
      out__.write_free_lb(0, mu_kappa);
      local_scalar_t__ sigma_kappa = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_kappa = context__.vals_r("sigma_kappa")[(1 - 1)];
      out__.write_free_lb(0, sigma_kappa);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"v0", "kappa", "tempt", "sigma",
                "mu_kappa", "sigma_kappa"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_record)},
                std::vector<size_t>{static_cast<size_t>(n_record)},
                std::vector<size_t>{static_cast<size_t>(n_record)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
      param_names__.emplace_back(std::string() + "v0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
      param_names__.emplace_back(std::string() + "kappa" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
      param_names__.emplace_back(std::string() + "tempt" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "mu_kappa");
    param_names__.emplace_back(std::string() + "sigma_kappa");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
      param_names__.emplace_back(std::string() + "v0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
      param_names__.emplace_back(std::string() + "kappa" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_record; ++sym1__) {
      param_names__.emplace_back(std::string() + "tempt" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "mu_kappa");
    param_names__.emplace_back(std::string() + "sigma_kappa");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"v0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_record) + "},\"block\":\"parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_record) + "},\"block\":\"parameters\"},{\"name\":\"tempt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_record) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_kappa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_kappa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"v0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_record) + "},\"block\":\"parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_record) + "},\"block\":\"parameters\"},{\"name\":\"tempt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_record) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_kappa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_kappa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((n_record + n_record) + n_record) + 1) +
      1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((n_record + n_record) + n_record) + 1) +
      1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_linexp_gastro_1b_namespace::model_linexp_gastro_1b;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_linexp_gastro_1b_namespace::profiles__;
}
#endif
#endif
